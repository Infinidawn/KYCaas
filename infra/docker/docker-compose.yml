services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: kyc
    ports:
      - "5435:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  minio:
    image: minio/minio:RELEASE.2025-09-07T16-13-09Z
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    ports:
      - "9001:9001"   # Web console
  minio-proxy:
    image: nginx:1.27-alpine
    depends_on: [ minio ]
    ports:
      - "9000:9000"   # public S3 endpoint for your team
    volumes:
      - ./nginx:/etc/nginx/conf.d:ro

  rabbitmq:
    image: rabbitmq:3.13-management
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest

  # Thin-slice services
  onboarding-service:
    build: ../../services/onboarding-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/kyc
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      MINIO_ENDPOINT: http://minio:9000
      MINIO_PUBLIC_ENDPOINT: http://localhost:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      MINIO_BUCKET: kyc-objects
      MINIO_PRESIGN_TTL: 300

    ports: [ "8001:8080" ]
    depends_on: [ postgres, minio, minio-proxy ]

  verification-service:
    build: ../../services/verification-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/kyc
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    ports: [ "8002:8080" ]
    depends_on: [ postgres ]

  document-service:
    build: ../../services/document-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/kyc
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASS: guest
      OCR_EXCHANGE: x.ocr
      OCR_ROUTING_KEY: ocr.request
    ports: [ "8003:8080" ]
    depends_on: [ postgres,rabbitmq ]

  biometrics-service:
    build: ../../services/biometrics-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/kyc
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASS: guest
      LIVENESS_EXCHANGE: x.liveness
      LIVENESS_ROUTING_KEY: liveness.request
    ports: [ "8004:8080" ]
    depends_on: [ postgres,rabbitmq ]

  risk-engine:
    build: ../../services/risk-engine
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/kyc
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASS: guest
    ports: [ "8005:8080" ]
    depends_on: [ postgres, rabbitmq ]

volumes:
  pgdata:
  minio_data:
