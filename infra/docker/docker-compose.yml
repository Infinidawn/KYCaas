services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: kyc
    ports:
      - "5435:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  minio:
    image: minio/minio:RELEASE.2025-09-07T16-13-09Z
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    # Only the console is exposed directly (9001). Public S3 goes via nginx proxy below.
    ports:
      - "9001:9001"

  minio-proxy:
    image: nginx:1.27-alpine
    depends_on: [ minio ]
    ports:
      - "9000:9000"   # public S3 endpoint for your team
    volumes:
      - ./nginx:/etc/nginx/conf.d:ro

  rabbitmq:
    image: rabbitmq:3.13-management
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest

  # -------------------------
  # Application microservices
  # -------------------------
  onboarding-service:
    build: ../../services/onboarding-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/kyc
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres

      MINIO_ENDPOINT: http://minio:9000              # internal to compose
      MINIO_PUBLIC_ENDPOINT: http://localhost:9000   # what presigned URLs should point to
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      MINIO_BUCKET: kyc-objects
      MINIO_PRESIGN_TTL: 300

      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: "5672"
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
    ports: [ "8001:8080" ]
    depends_on: [ postgres, minio, minio-proxy, rabbitmq ]

  verification-service:
    build: ../../services/verification-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/kyc
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    ports: [ "8002:8080" ]
    depends_on: [ postgres ]

  document-service:
    build: ../../services/document-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/kyc
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: "5672"
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
    ports: [ "8003:8080" ]
    depends_on: [ postgres, rabbitmq ]

  biometrics-service:
    build: ../../services/biometrics-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/kyc
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: "5672"
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
    ports: [ "8004:8080" ]
    depends_on: [ postgres, rabbitmq ]

  risk-engine:
    build: ../../services/risk-engine
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/kyc
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: "5672"
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
    ports: [ "8005:8080" ]
    depends_on: [ postgres, rabbitmq ]

  # -------------------------
  # API Gateway
  # -------------------------
  gateway-service:
    build: ../../services/gateway-service
    environment:
      # Point gateway routes at internal service names (compose DNS)
      ONBOARDING_URL: http://onboarding-service:8080
      DOCUMENT_URL: http://document-service:8080
      BIOMETRIC_URL: http://biometrics-service:8080
      RISK_URL: http://risk-engine:8080

      # Tenant resolver fallback (matches @Value default, but explicit is clearer)
      TENANT_RESOLVE_URL: http://onboarding-service:8080/internal/tenants/resolve

      # Optional: increase Netty header size if needed
      # SPRING_CODEC_MAX_IN_MEMORY_SIZE: 10MB
    ports:
      - "8000:8080"   # Gateway external port
    depends_on:
      - onboarding-service
      - document-service
      - biometrics-service
      - risk-engine
      - rabbitmq

volumes:
  pgdata:
  minio_data:
